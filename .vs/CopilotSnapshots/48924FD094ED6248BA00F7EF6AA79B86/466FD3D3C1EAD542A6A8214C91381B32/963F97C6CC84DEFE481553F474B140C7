using System;
using ZastitaInformacija_18658.Algorithms;
using ZastitaInformacija_18658.Enums;

namespace ZastitaInformacija_18658.Services
{
    public static class EncryptionManager
    {
        public static byte[] Encrypt(byte[] data, EncryptionAlgorithm algorithm, string key)
        {
            switch (algorithm)
            {
                case EncryptionAlgorithm.TEA:
                    return TEA.Encrypt(data, key);
                case EncryptionAlgorithm.LEA:
                    return LEA.Encrypt(data, key);
                case EncryptionAlgorithm.CRT:
                    return CRT.Encrypt(data, key);
                default:
                    throw new ArgumentException($"Unsupported encryption algorithm: {algorithm}");
            }
        }

        public static byte[] Decrypt(byte[] data, EncryptionAlgorithm algorithm, string key)
        {
            switch (algorithm)
            {
                case EncryptionAlgorithm.TEA:
                    return TEA.Decrypt(data, key);
                case EncryptionAlgorithm.LEA:
                    return LEA.Decrypt(data, key);
                case EncryptionAlgorithm.CRT:
                    return CRT.Decrypt(data, key);
                default:
                    throw new ArgumentException($"Unsupported decryption algorithm: {algorithm}");
            }
        }

        public static string GetAlgorithmDisplayName(EncryptionAlgorithm algorithm)
        {
            switch (algorithm)
            {
                case EncryptionAlgorithm.TEA:
                    return "TEA (Tiny Encryption Algorithm)";
                case EncryptionAlgorithm.LEA:
                    return "LEA (Lightweight Encryption Algorithm)";
                case EncryptionAlgorithm.CRT:
                    return "CRT (Chinese Remainder Theorem)";
                default:
                    return algorithm.ToString();
            }
        }
    }
}